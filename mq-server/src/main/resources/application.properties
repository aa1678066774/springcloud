spring.application.name=rocketmq-server
server.port=5051
eureka.client.serviceUrl.defaultZone=http://localhost:3030/eureka/

#sql\u8BED\u53E5\u65E5\u5FD7
logging.level.com.tww.user.dao=debug
logging.level.com.netflix.discovery.shared=warn

#spring.rocketmq.nameServer=localhost:9876
#spring.rocketmq.producer.group=test_producer
#

#rocketmq.name-server=127.0.0.1:9876
#rocketmq.producer.group=test_producer


#rabbitmq config begin
# rabbitmq\u670D\u52A1\u5668\u5730\u5740 \uFF08\u9ED8\u8BA4\u4E3A127.0.0.1\uFF09
spring.rabbitmq.host=127.0.0.1
# rabbitmq\u670D\u52A1\u5668\u8FDE\u63A5\u7AEF\u53E3 \uFF08\u9ED8\u8BA4\u4E3A5672\uFF09
spring.rabbitmq.port=5672
spring.rabbitmq.username=tww
spring.rabbitmq.password=12345678
#rabbitmq config end



#### kafka\u914D\u7F6E\u751F\u4EA7\u8005 begin ####
#============== kafka ===================
# \u6307\u5B9Akafka server\u7684\u5730\u5740\uFF0C\u96C6\u7FA4\u914D\u591A\u4E2A\uFF0C\u4E2D\u95F4\uFF0C\u9017\u53F7\u9694\u5F00
spring.kafka.bootstrap-servers=127.0.0.1:9092

#=============== provider  =======================
# \u5199\u5165\u5931\u8D25\u65F6\uFF0C\u91CD\u8BD5\u6B21\u6570\u3002\u5F53leader\u8282\u70B9\u5931\u6548\uFF0C\u4E00\u4E2Arepli\u8282\u70B9\u4F1A\u66FF\u4EE3\u6210\u4E3Aleader\u8282\u70B9\uFF0C\u6B64\u65F6\u53EF\u80FD\u51FA\u73B0\u5199\u5165\u5931\u8D25\uFF0C
# \u5F53retris\u4E3A0\u65F6\uFF0Cproduce\u4E0D\u4F1A\u91CD\u590D\u3002retirs\u91CD\u53D1\uFF0C\u6B64\u65F6repli\u8282\u70B9\u5B8C\u5168\u6210\u4E3Aleader\u8282\u70B9\uFF0C\u4E0D\u4F1A\u4EA7\u751F\u6D88\u606F\u4E22\u5931\u3002
spring.kafka.producer.retries=0
# \u6BCF\u6B21\u6279\u91CF\u53D1\u9001\u6D88\u606F\u7684\u6570\u91CF,produce\u79EF\u7D2F\u5230\u4E00\u5B9A\u6570\u636E\uFF0C\u4E00\u6B21\u53D1\u9001
spring.kafka.producer.batch-size=16384
# produce\u79EF\u7D2F\u6570\u636E\u4E00\u6B21\u53D1\u9001\uFF0C\u7F13\u5B58\u5927\u5C0F\u8FBE\u5230buffer.memory\u5C31\u53D1\u9001\u6570\u636E
spring.kafka.producer.buffer-memory=33554432

#procedure\u8981\u6C42leader\u5728\u8003\u8651\u5B8C\u6210\u8BF7\u6C42\u4E4B\u524D\u6536\u5230\u7684\u786E\u8BA4\u6570\uFF0C\u7528\u4E8E\u63A7\u5236\u53D1\u9001\u8BB0\u5F55\u5728\u670D\u52A1\u7AEF\u7684\u6301\u4E45\u5316\uFF0C\u5176\u503C\u53EF\u4EE5\u4E3A\u5982\u4E0B\uFF1A
#acks = 0 \u5982\u679C\u8BBE\u7F6E\u4E3A\u96F6\uFF0C\u5219\u751F\u4EA7\u8005\u5C06\u4E0D\u4F1A\u7B49\u5F85\u6765\u81EA\u670D\u52A1\u5668\u7684\u4EFB\u4F55\u786E\u8BA4\uFF0C\u8BE5\u8BB0\u5F55\u5C06\u7ACB\u5373\u6DFB\u52A0\u5230\u5957\u63A5\u5B57\u7F13\u51B2\u533A\u5E76\u89C6\u4E3A\u5DF2\u53D1\u9001\u3002\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C\u65E0\u6CD5\u4FDD\u8BC1\u670D\u52A1\u5668\u5DF2\u6536\u5230\u8BB0\u5F55\uFF0C\u5E76\u4E14\u91CD\u8BD5\u914D\u7F6E\u5C06\u4E0D\u4F1A\u751F\u6548\uFF08\u56E0\u4E3A\u5BA2\u6237\u7AEF\u901A\u5E38\u4E0D\u4F1A\u77E5\u9053\u4EFB\u4F55\u6545\u969C\uFF09\uFF0C\u4E3A\u6BCF\u6761\u8BB0\u5F55\u8FD4\u56DE\u7684\u504F\u79FB\u91CF\u59CB\u7EC8\u8BBE\u7F6E\u4E3A-1\u3002
#acks = 1 \u8FD9\u610F\u5473\u7740leader\u4F1A\u5C06\u8BB0\u5F55\u5199\u5165\u5176\u672C\u5730\u65E5\u5FD7\uFF0C\u4F46\u65E0\u9700\u7B49\u5F85\u6240\u6709\u526F\u672C\u670D\u52A1\u5668\u7684\u5B8C\u5168\u786E\u8BA4\u5373\u53EF\u505A\u51FA\u56DE\u5E94\uFF0C\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C\u5982\u679Cleader\u5728\u786E\u8BA4\u8BB0\u5F55\u540E\u7ACB\u5373\u5931\u8D25\uFF0C\u4F46\u5728\u5C06\u6570\u636E\u590D\u5236\u5230\u6240\u6709\u7684\u526F\u672C\u670D\u52A1\u5668\u4E4B\u524D\uFF0C\u5219\u8BB0\u5F55\u5C06\u4F1A\u4E22\u5931\u3002
#acks = all \u8FD9\u610F\u5473\u7740leader\u5C06\u7B49\u5F85\u5B8C\u6574\u7684\u540C\u6B65\u526F\u672C\u96C6\u4EE5\u786E\u8BA4\u8BB0\u5F55\uFF0C\u8FD9\u4FDD\u8BC1\u4E86\u53EA\u8981\u81F3\u5C11\u4E00\u4E2A\u540C\u6B65\u526F\u672C\u670D\u52A1\u5668\u4ECD\u7136\u5B58\u6D3B\uFF0C\u8BB0\u5F55\u5C31\u4E0D\u4F1A\u4E22\u5931\uFF0C\u8FD9\u662F\u6700\u5F3A\u6709\u529B\u7684\u4FDD\u8BC1\uFF0C\u8FD9\u76F8\u5F53\u4E8Eacks = -1\u7684\u8BBE\u7F6E\u3002
#\u53EF\u4EE5\u8BBE\u7F6E\u7684\u503C\u4E3A\uFF1Aall, -1, 0, 1
spring.kafka.producer.acks=1

# \u6307\u5B9A\u6D88\u606Fkey\u548C\u6D88\u606F\u4F53\u7684\u7F16\u89E3\u7801\u65B9\u5F0F
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

#### kafka\u914D\u7F6E\u751F\u4EA7\u8005 end ####


#### kafka\u914D\u7F6E\u6D88\u8D39\u8005 start ####
# \u6307\u5B9A\u9ED8\u8BA4\u6D88\u8D39\u8005group id --> \u7531\u4E8E\u5728kafka\u4E2D\uFF0C\u540C\u4E00\u7EC4\u4E2D\u7684consumer\u4E0D\u4F1A\u8BFB\u53D6\u5230\u540C\u4E00\u4E2A\u6D88\u606F\uFF0C\u4F9D\u9760groud.id\u8BBE\u7F6E\u7EC4\u540D
spring.kafka.consumer.group-id=test
# smallest\u548Clargest\u624D\u6709\u6548\uFF0C\u5982\u679Csmallest\u91CD\u65B00\u5F00\u59CB\u8BFB\u53D6\uFF0C\u5982\u679C\u662Flargest\u4ECElogfile\u7684offset\u8BFB\u53D6\u3002\u4E00\u822C\u60C5\u51B5\u4E0B\u6211\u4EEC\u90FD\u662F\u8BBE\u7F6Esmallest
spring.kafka.consumer.auto-offset-reset=earliest
# enable.auto.commit:true --> \u8BBE\u7F6E\u81EA\u52A8\u63D0\u4EA4offset
spring.kafka.consumer.enable-auto-commit=true
#\u5982\u679C'enable.auto.commit'\u4E3Atrue\uFF0C\u5219\u6D88\u8D39\u8005\u504F\u79FB\u81EA\u52A8\u63D0\u4EA4\u7ED9Kafka\u7684\u9891\u7387\uFF08\u4EE5\u6BEB\u79D2\u4E3A\u5355\u4F4D\uFF09\uFF0C\u9ED8\u8BA4\u503C\u4E3A5000\u3002
spring.kafka.consumer.auto-commit-interval=1000

# \u6307\u5B9A\u6D88\u606Fkey\u548C\u6D88\u606F\u4F53\u7684\u7F16\u89E3\u7801\u65B9\u5F0F
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

#### kafka\u914D\u7F6E\u6D88\u8D39\u8005 end ####